# ec2Test main wolkflow
name: ec2Test Project CI/CD

# 어떤 이벤트가 발생하면 workflow 실행할 지 명시
on:
  # main 브런치에 push나 pull request 발생 시
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 위 이벤트 발생 시 실행될 작업들
jobs:
  build:
    # VM의 실행 환경 지정 -> ubuntu 최신 버전
    runs-on: ubuntu-latest

    # 실행될 jobs를 순서대로 명시
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # JDK 17 설치  
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Gradle Build를 위한 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    # Gradle Build(test 제외)
    - name: Build with Gradle
      run: ./gradlew clean bootWar --exclude-task test

    # DockerHub 로그인
    - name: DockerHub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Docker 이미지 빌드
    - name: Docker Image Build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} .
      

    # DockerHub Push
    - name: DockerHub Push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
      

    # EC2 인스턴스 접속 및 애플리케이션 실행
    - name: Application Run
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_KEY }}
        port: 22
        timeout: 300s  # 타임아웃 5분으로 증가
        command_timeout: 30m
        debug: true    # 디버그 모드 활성화
        script: |
          echo "Testing SSH connection..."
          whoami
          pwd
          echo "Starting deployment..."
          
          cd ~/wbc001

          echo "Stopping existing container..."
          sudo docker kill ${{ secrets.PROJECT_NAME }} || true
          sudo docker rm -f ${{ secrets.PROJECT_NAME }} || true
          
          echo "Removing existing image..."
          sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} || true
          
          echo "Pulling new image..."
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
    
          echo "Running new container..."
          sudo docker run -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
          --name ${{ secrets.PROJECT_NAME }} \
          --network wbc001_app-network \
          --dns 8.8.8.8 \
          --dns 1.1.1.1 \
          --security-opt no-new-privileges=true \
          --dns-opt ndots:1 \
          --dns-opt timeout:2 \
          --dns-opt attempts:5 \
          -d ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
          
          echo "Deployment completed"
